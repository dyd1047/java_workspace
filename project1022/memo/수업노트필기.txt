IT 강남에 귀하를 초대합니다.

주제: 융합서비스 애플리케이션 개발자 양성C

회의 ID: 531 662 6199
암호: 7763







 [ 출석 미처리 ]

서진호( 아직 안옴)
임현주 (출석처리 안되어 있네요, 처리부탁)









 
  제가 목이 많이 안좋아져서, 오늘은 텍스트로 말을 작성해서 수업해도 
  될까요 여러분 ? ^_____^ 감사합니다~~

-----------------------------------------------------------------
오늘의 수업 주제 
- 패키지와 임포트 

프로젝트 새로 만들겠습니다

개발시, 사실상 원본소스와 컴파일 결과물은 반드시 구부해서 관리합니다
이때 원본소스는 src, 컴파일 결과물은 bin or classes라는 이름으로 많이사용
합니다.
따라서 현재 프로젝트에 src , bin 폴더를 만들어 주세요 
지금 작성하는 텍스트는 깃헙에 올릴께요 저장해서~
project1022/src
	    /bin	

이제 src 에 .java 소스를 저장하되, 관리목적상 패키지를 직접 만들어야 합니다
주의할것은 원본소스의 패키지는 개발자가 손으로 직접 만들어야 하고, 
컴파일 결과물의 패키지는 자동으로 만들어 집니다
src/animal 이라는 패키지 만들어 주세요 
Dog.java라는 클래스를 만들되, 패키지를 선언하셔야, 컴파일시 패키지가 
자동으로 만들어 집니다

이제 이 클래스를 컴파일해서, bin 안에 자동으로 만들어 지도록 하겠습니다.
명령어는   javac  -d  경로  Dog.java 입니다. 
시도해보세요~(cmd 에서 원본소스가 있는 곳으로 먼저 가야합니다)

이제 bin으로 가셔서 육안으로 확인해보세요 animal이 자동으로 만들어졌는지요~
자동으로 만들어졌다면 성공이구요, 개발시 일일이 콘솔에서 컴파일하기엔 효율성이
떨어지므로, 툴을 이용하여 이 작업을 진행합시다
editplus에서 툴에 등록해야 합니다... 참고로 매 프로젝트마다 하셔야 합니다.
어제한것은 못 씁니다. 이것도 불편하다면 앞으로 이클립스 쓸거니깐 염려놓으시구요!

이렇게 글로 수업해도 괜찬죠? ㅎㅎㅎㅎ 감사합니다.오히려 좋을 수도 있어요
수업이 기록됩니다.~이제  editplus 로 갑시다~~등록하러

새로운 그룹을 선택하고, 원하시는 이름을 부여합니다
저는 프로젝트 이름과 동일한 이름을 부여할께요 project1022

이제 컴파일러와 명령어를 등록합니다.
컴파일환경을 등록하신 후엔 꼭 사용할 그룹을선택하셔야 합니다.
어제 개발하던 환경에서 오늘 등록한 그룹으로 선택을 바꾸세요 

다 된거같네요, 이제  bin/animal을 지우고  재컴파일 해보세요 , 생성되는지 체크
ctrl + 1 눌러서 컴파일 시도했을때, bin/animal이 나오면 성공입니다
잘됩니다...혹시 안되시는 분 손!!!
그럼 이제 , 다른 클래스도 하나 정의해서 서로 다른 경로에 있는 클래스를 사용하는 
법을 배워볼께요 , 잠시 에러나는 사람꺼 봐줄께요
실습 시작합시다 
use라는 패키지에 ,  UseDog이라는 클래스를 정의합니다



//원래는 D:\workspace\java_workspace\project1022\bin/use 이죠?
//근데 use 앞에 bin까지를 환경변수로 등록하면 됩니다
//등록하러 갑시다
//현재 클래스와는 다른 경로에 있는 클래스를 사용해야 하는데, 
//컴파일러가 어떻게 Dog.class를 찾을 수 있는지 알아야 합니다.
//현재로서는 컴파일러가 UseDog과 같은 디렉토리만 찾아 헤맵니다.
//따라서 아래의 코드는 cant find symbol  에러 날겁니다
//이 문제를 해결하려면, 여러분들은 클래스의 경로를 알려줘야 하는데, 
//일반적으로 경로를 등록할때는 환경변수를 이용합니다 
//경로가 일반 파일일 경우는 path 환경변수 이지만, 
//경로가 클래스 파일일 경우는 classpath 환경변수를 이용하면 됩니다.
//이때, classpath 환경변수에 어느 경로를 등록해야 할지 고민해보세요 
//외우지 마시고 , 간단히 생각해보세요 현재 UseDog 클래스와 Dog
//클래스에서 우리가 생략한 경로가 무엇인지 확인해봅시다, 위를 보세요

기존에 이미 환경변수 classpath 에 등록된 경로가 있을때는 지우지 마시고
세미콜론으로 연결하시면 됩니다. 그리고의 뜻이에요 
경로;경로2;경로3....이런식입니다
일반적으로 환경변수가 등록되고 나면, 윈도우 OS가 모든 프로그램을 대상으로 
broadCasting을 합니다(바뀐내용을 방송하는 행위) 따라서, 바뀌기 전에
열어놓았던 모든 프로그램은 종료했다가 다시 열어야 하므로 editplus를 껏다켜세요
윈도우10서부터는 환경변수에 세미콜론으로 두개이상의 경로를 등록하면
저렇게 목록으로 보여줍니다. 따라서 당황하지 마세요 저게 더 편한겁니다

이제 UseDog을 컴파일 해보세요 
지금 에러가 또 찾을 수 없다고 한것은 왜그러냐면, 나와는 다른 경로에 잇는 클래스는
반드시  import 문도 함께 작성해야합니다.
클래스 package 선언부 아래에 여러분이 사용하고픈, 클래스의 경로를 명시하세요

import  bin이하의 경로를 명시합니다.
사용하고픈 클래스의 package 선언과 일치합니다

이제 컴파일 시도해보세요~
지금또 에러가 나는데, 이것은 정상적으로 인식한 에러입니다.
단지, 패키지에 들어간 클래스는 반드시 외부에서 접근할 수 있도록 접근제한을
풀어주셔야 하는데, 우리는 그걸 하지 않았어요..
지금부터 Dog 클래스를 외부에서 사용할 수 있도록 접근제한을 풀어주고 좀 쉬었다
합시다
--------------------------------------------------------------
2교시 
--------------------------------------------------------------
1교시에는 아래의 두가지를 배웠습니다.
1) 컴파일시 원하는 경로에 클래스 생성하는 법
2) 다른 경로에 있는 클래스 사용하는 법( import, classpath 이용) 

2교시에는 패키지 사용시 클래스 실행하는 법을 알아봅니다 
일단 명령어 원칙은 아래와 같습니다.
패키지 사용안할때) java  클래스명
패키지 사용할때) java  패키지경로.클래스명  

cmd 창에서 먼저 명령어를 실습해보고,  editplus 에 등록하겠습니다
cmd 창 열어보세요 어때요? 아무데서나 UseDog클래스를 사용할수있어요
이유는 환경변수에  classpath 를 등록했기 때문이에요 
그런데 로직이 없으니깐, 아무런 반응이 없네요 ,
로직 추가합시다 ( 잘되는게 확인됩니다) 

이제 이 실행 명령어도  editplus 툴에 등록해서 편하게 개발합시다 
이제 실행해보세요 ctrl + 2
프롬프트에서 물어보네요, 실행할 UseDog클래스가 소속된 패키지명이 뭐냐고
use 잔아요?  따라서  use라고 입력하고 엔터치세요 
잘됩니다.
당분간은 이클립스라는 전용 툴을 쓰지 않고, 이렇게 혹독한 훈련을 진행할 거에요 
이 과정은 매 프로젝트마다 하셔야 합니다.. (실력도 좋아짐 ) 
에러나는 분 손! 노트필기 공유했습니다
지금부터는 제가 과제를 드릴테니, 여러분이 실습해보시는 겁니다.
-----------------------------
실습과제 (10시 35분까지 진행) : 같이 해봅시다 
-----------------------------
1) 새로운 프로젝트 디렉토리를 만든 후 그 안에 원본소스 src, 컴파일결과물 bin
    디렉토리를 둔다 (O)

2)  src의 원본소스를 컴파일하면 bin으로 자동으로 들어갈 수 있도록
      editplus에 컴파일 도구를 등록한다 
      
    1) editplus 에 
      D:\workspace\java_workspace\packagetest\bin 을 등록합시다 

    2) 이 경로를 환경변수에도 등록합시다 
         이 경로가 이 프로젝트의 루트 클래스패스가 됩니다.
      classpath값에 D:\workspace\java_workspace\packagetest\bin
      를 추가해주세요
      제일 위로 올라오게 해주면, 클래스명이 중복될경우에 우선순위를 갖게 됩니다.
      (필수는 아님)
    3)환경변수가 바뀌면, 관련된 프로그램도 종료 후 다시 켜셔야합니다.
         cmd, editplus 등을 닫앗다가 열어주세요 
  
3) src에 Cat이라는 클래스를 pet이라는 패키지에 두고  eat() 메서드 추가한후
     컴파일 한다 (O)

    check)
     고양이 클래스는 다른 외부의 클래스가 사용할수 있도록  public 으로 선언해야 합니다.

4) src에 UseCat이라는 클래스를 study 라는 패키지에 두고 main() 메서드
     메서 고양이의 eat() 메서드를 호출하는 코드를 작성하고 컴파일한다 

     UseCat 만들러 갑시다 
     UseCat 컴파일 해보세요 
     정상적으로 됩니다. 
    안되시는 분 손!!

5)  editplus 도구에 실행명령어를 등록하고 ctrl+2로 실행해본다 

     java   패키지명.클래스명   을 editplus 에 등록합시다

복습까지 마쳤습니다.
이렇게 공부하지 않으면 나중에 개발자로 취업했을때, 이클립스 없으면 개발을 못해요..
실제 현장에 나가서, 리눅스나 특정 os에 개발툴 없이 컴파일 해야할 경우가 많은데,
이클립스는 서버에 설치되어 있지 않아요..그래서 이런 개념조차 없으면 개발자도 아님 ㅋㅋ
원래 서버는 그냥 서버로서 수행만 하지 개발용이 아니라서, 서버는 까만화면에 흰글씨만 나오는
콘솔환경입니다...따라서 이 실습이 중요해요..대부분의 학생들은 곧바로 이클립스로 수업을 받아서
이런 능력이 없어요..꼭 연습하세요!!!!!! ^^

이제 문제풀이의 시간입니당
구글 드라이브에 패키지와 임포트라는 파일을 올려놓앗습니다, 열어주세용!~

-------------------------------------------------------------
구글 드라이브 문제 풀이 노트
-------------------------------------------------------------
패키지와 임포트
1
다음 설명 중 틀린 것은?

강하영씨가 1번 알죠?
(1) 같은 디렉토리내의 파일명은 OS차원에서도 중복을 허용하지 않으므로 클래스를 하나의 디렉토리에 
     계속 누적하다 보면 클래스 명의 중복을 피하기란 쉽지 않다. (맞아요!!)

고준씨 -맞아요 O
(2) 클래스 명의 중복을 원천적으로 방지하기 위해서는 서로 다른 디렉토리로 구분하여 저장하면 된다.
   
권용은씨 - 맞아요 O
(3) 관련성 있는 클래스들을 디렉토리 단위로 구분하여 모아놓는 관리방법을 패키지라고 한다.

우리 호흡이 척척맞네요 ㅋㅋ
김범진씨가 합시다 - 맞아요 O (디렉토리로 구분하면 절대 중복문제가 없지요, 사진파일도 그렇고..모두)
(4) 클래스 파일명이 동일하더라도 패키지가 다를 경우엔 중복의 문제는 발생하지 않는다.

김수연씨 - 그렇죠  X 죠 , import 문을 사용하면 다른 패키지의 클래스를 사용할 수있어요 
               단, 해당 패키지에서  public 으로 공개했을때만 가능합니다.이것을 접근제한자라고 하고,
               오늘 배울겁니다
(5) 서로 다른 디렉토리에 존재하는 클래스간의 접근은 불가능하다.

김완수씨 - 맞아요 O
(6) 패키지화하여 관리하는 목적은 중복도 피하고, 관련성 있는 클래스들 간의 관리 목적 때문이다.


2
아래 클래스에 대한 설명 중 올바르지 않은 것은?

package pack1;
class  Car{
   int price=300;
}

김용씨 -  맞아요 O 
(1) javac –d 옵션으로 컴파일을 수행하면 pack1 이라는 패키지가 자동으로 생성되면서 그 안에
    Car.class를 생성하여 준다.

김재성씨 - 네 맞아요 O
               editplus 에서 ctrl+1을 여러번 누르면 오직 한개만 생성됩니다. 덮어쓰는 거죠
(2) 만일 이미 pack1 이라는 패키지가 존재한다면 중복 생성되지 않는다.

김지언씨 - 맞아요 O 이 클래스는 public 으로 접근제한을 풀지 않아서, 아무도!!! 쓸수 없습니다.
              앞으로 패키지에 넣는 클래스는 무조건  public으로 해주세요~~!
              아마 이런질문 하시는 분 계실걸요, public으로 하면 보안이 뚫리는거 아니냐하고요!
              클래스는 공개하되 , 안에 구성된 변수와 메서드를 막으면 되는거라서 , 클래스는 열여놓아도
              상관 없습니다.
              예)  은행강도가 많다고 은행문 닫으면 안됩니다..

(3) 이 클래스는 외부에서 절대로 접근이 불가능한 클래스이다.

김한나씨 - 이 문제는 배우지 않았으므로, 그냥 넘어갑니다 ㅎㅎ 죄송해요 
               답은 말씀 드릴께요 답은 틀리다 입니다.  default 접근 제한자가 지정됩니다.
               이따가 배울거라서, 그냥 넘어가겠습니다.
                              
(4) price 멤버변수에 접근 제한자가 지정되지 않으면 자동으로 private 으로 지정된 것과 같다.


3
위 3번의 클래스가 실제 하드디스크 D:\minjava\pack1 에 들어있다고 가정할 때 import 문으로 올바른 것을 모두 고르면?

맞다O  틀리다X로 대답하시면 됩니다.

박재헌씨 그렇죠 틀립니다 X , 아래에서 틀린 이유는?  
 D:/   ← 이 표현 자체가 윈도우 용이므로 자바의 슬로건에 위배됩니다. 자바는 특정 OS 에 의존하지 
하면 안됩니다.              
(1) import D:/ minjava    

박재현씨 - 그렇죠 틀립니다 X 
               이유는? 자바의 패키지는 일반 디렉토리와는 달리 디렉토리 구분은 점(.)으로 합니다
               또한 클래스명이 빠져있습니다
               따라서  import minjava.pack1.클래스명;  


(2) import minjava /pack1

배성민씨 -  그렇죠 틀립니다 이유는 이미 설명했으므로 생략
(3) import pack1;

손동진씨 - 그렇죠  X
(4) import D:/minjava/pack/Car

신형진씨 - 그렇죠 O 
(5) import pack1.Car

오성규씨 - ㅎㅎ 이건 맞아요, 올바른 표기입니다. pack1  하위의 모든 것들을 지칭하는 겁니다.(가능)
(6) import pack1.*


4
다음 설명 중 올바르지 않은 것은?
윤빈씨 -  O 맞아요
(1) 클래스를 하나의 디렉토리에 몰아넣으면 클래스 명이 중복될 경우 중복 파일 문제가 발생할 수 있다.

이동규씨 - 맞ㅂ아요 O
(2) 관련 있는 디렉토리로 비슷한 업무의 클래스들을 묶어 놓는 것은 관리상 효율성이 있다.

이동열씨 - 맞아요 O 
              실무에서는 패키지명을 우리 공부한것처럼 단순하게 하지 않고요 
              다른 회사와 협력할때, 서로 패키지와 클래스를 주고받는 경우가 잇는데, 
              이때 참 운이 없게도, 내가 만든클래스와 패키지명이 다른 회사 직원것과 완전 똑같을수도 있
               거든요,,이때는 문제가 발생하죠..덮어써버리니..
               이런 문제를 해결하기 위해, 개발자들 사이에서는 자신의 회사 도메인을 거꾸로 뒤집은 패키지를 일단 상위 패키지로 둡니다.
예)   test.com 이라는 도메인을 보유한 회사라면,  com.test.study 이런식으로 뒤짚습니다
(3) 패키지 명은 소문자로 하되, 주로 개발 밴더사의 도메인을 거꾸로 기재하여 배포한다.

이성윤씨 - 음..이건 오늘 배울건데, 아래처럼 보안이 뚫리는 경우가 있으므로, 접근제한자로 제한을 둘수
              있습니다. 답은 틀리다 입니다 X 언제든지라는 표현이 잘못됨..
(4) 같은 패키지 내에 있는 클래스들 끼리는 언제든지 서로의 데이터를 접근할 수 있다.

이 노트 계속 공유할께요. 책한권 분량 타자치는거 같아요 ㅜㅜ








































































































































